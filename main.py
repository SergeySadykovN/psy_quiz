import os

from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import KeyboardButton

from questions import questions

bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
class Quiz(StatesGroup):
    in_progress = State()
    waiting_for_answer = State()




# –•—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –≤ –ø–∞–º—è—Ç–∏ (user_id: {"top": 0, "heart": 0, "sex": 0})
user_scores = {}


# /start
@dp.message(CommandStart())
async def start(message: types.Message, state: FSMContext):
    user_name = message.from_user.full_name
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç {user_name}! \n\n–≠—Ç–æ —Ç–µ—Å—Ç ¬´–¢—Ä–∏ —É—Ä–æ–≤–Ω—è –ª—é–±–≤–∏¬ª.\n"
        "–û—Ç–≤–µ—Ç—å –Ω–∞ 9 –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Ü–µ–Ω—Ç—Ä.",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data="start_quiz")
        ]])
    )


# –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞
@dp.callback_query(lambda c: c.data == "start_quiz")
async def start_quiz(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user_scores[user_id] = {"top": 0, "heart": 0, "sex": 0}
    await state.set_state(Quiz.in_progress)
    await send_question(user_id, 0)


# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
async def send_question(user_id: int, question_id: int):
    question = questions[question_id]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text=opt["text"], callback_data=f"answer_{question_id}_{opt['center']}")]
        for opt in question["options"]
    ])
    await bot.send_message(user_id, question["text"], reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
@dp.callback_query(lambda c: c.data.startswith("answer_"))
async def handle_answer(callback: types.CallbackQuery, state: FSMContext):
    _, question_id, center = callback.data.split("_")
    user_id = callback.from_user.id
    user_scores[user_id][center] += 1  # +1 –±–∞–ª–ª –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ü–µ–Ω—Ç—Ä—É

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    next_question_id = int(question_id) + 1
    if next_question_id < len(questions):
        await send_question(user_id, next_question_id)
    else:
        await show_result(user_id)
        await state.clear()


# –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
async def show_result(user_id: int):
    scores = user_scores[user_id]
    max_center = max(scores, key=scores.get)
    min_center = min(scores, key=scores.get)

    result_text = (
        f"üéâ –¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n\n"
        f"üß† –í–µ—Ä—Ö–Ω–∏–π —Ü–µ–Ω—Ç—Ä: {scores['top']}\n"
        f"üíö –°–µ—Ä–¥–µ—á–Ω—ã–π —Ü–µ–Ω—Ç—Ä: {scores['heart']}\n"
        f"üî• –°–µ–∫—Å—É–∞–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä: {scores['sex']}\n\n"
        f"üîç –î–æ–º–∏–Ω–∏—Ä—É–µ—Ç: {max_center}\n"
        f"‚ùó –°–ª–∞–±—ã–π: {min_center}"
    )

    await bot.send_message(
        user_id,
        result_text,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/unionlevels")
        ]])
    )


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    dp.run_polling(bot)
