import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from questions import questions
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(
    token=os.getenv("BOT_TOKEN"),
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Webhook
base_webhook_url = os.getenv("WEBHOOK_URL")
if not base_webhook_url:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
WEBHOOK_PATH = f"/webhook/{os.getenv('BOT_TOKEN')}"
WEBHOOK_URL = base_webhook_url + WEBHOOK_PATH

ADMIN_ID = 966780974
# CHANNEL_USERNAME = "@andbeginagain"
CHANNEL_USERNAME = "@AndrewMoriz_psy20"

# –°–æ–≤–µ—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
ADVICE = {
    "top": (
        "–¢–≤–æ–π –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Ü–µ–Ω—Ç—Ä ‚Äî –≤–µ—Ä—Ö–Ω–∏–π üß†.\n"
        "–¢—ã –∏—â–µ—à—å –ø–∞—Ä—Ç–Ω—ë—Ä–∞, —Å –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è, –º–µ—á—Ç–∞—Ç—å –∏ –≥–æ–≤–æ—Ä–∏—Ç—å ¬´–Ω–∞ –æ–¥–Ω–æ–º —è–∑—ã–∫–µ¬ª. "
        "–í–æ–∑–º–æ–∂–Ω–æ, —Ç–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –±–ª–∏–∑–æ—Å—Ç–∏ (—Å–µ—Ä–¥–µ—á–Ω—ã–π —Ü–µ–Ω—Ç—Ä) –∏–ª–∏ —Ç–µ–ª–µ—Å–Ω–æ–π —Å—Ç—Ä–∞—Å—Ç–∏ –∏ –æ—â—É—â–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏—è (—Å–µ–∫—Å—É–∞–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä)."
    ),
    "heart": (
        "–¢–≤–æ–π –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Ü–µ–Ω—Ç—Ä ‚Äî —Å–µ—Ä–¥–µ—á–Ω—ã–π üíö.\n"
        "–¢—ã —Å—Ç—Ä–µ–º–∏—à—å—Å—è –∫ –ª—é–±–≤–∏, —Ç–µ–ø–ª—É –∏ –±–ª–∏–∑–æ—Å—Ç–∏. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ—â—É—â–µ–Ω–∏—è, "
        "—á—Ç–æ –ø–∞—Ä—Ç–Ω—ë—Ä —Ä–∞–∑–¥–µ–ª—è–µ—Ç —Ç–≤–æ–∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ (–≤–µ—Ä—Ö–Ω–∏–π —Ü–µ–Ω—Ç—Ä) –∏–ª–∏ —Å–∏–ª—å–Ω–æ–≥–æ —Ç–µ–ª–µ—Å–Ω–æ–≥–æ –≤–ª–µ—á–µ–Ω–∏—è (—Å–µ–∫—Å—É–∞–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä)."
    ),
    "sex": (
        "–¢–≤–æ–π –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Ü–µ–Ω—Ç—Ä ‚Äî —Å–µ–∫—Å—É–∞–ª—å–Ω—ã–π üî•.\n"
        "–¢—ã –∂–∏–≤—ë—à—å —á–µ—Ä–µ–∑ —ç–Ω–µ—Ä–≥–∏—é —Ç–µ–ª–∞, —Å—Ç—Ä–∞—Å—Ç—å –∏ –ø—Ä–∏—Ç—è–∂–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç "
        "–¥—É—à–µ–≤–Ω–æ–π –≥–ª—É–±–∏–Ω—ã –∏ –ø—Ä–∏–Ω—è—Ç–∏—è (—Å–µ—Ä–¥–µ—á–Ω—ã–π —Ü–µ–Ω—Ç—Ä) –∏–ª–∏ –æ–±—â–∏—Ö —Ü–µ–ª–µ–π –∏ —Å–º—ã—Å–ª–æ–≤ —Å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º (–≤–µ—Ä—Ö–Ω–∏–π —Ü–µ–Ω—Ç—Ä)."
    ),
    "balance": (
        "–£ —Ç–µ–±—è –≥–∞—Ä–º–æ–Ω–∏—á–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ–∂–¥—É –≤–µ—Ä—Ö–Ω–∏–º, —Å–µ—Ä–¥–µ—á–Ω—ã–º –∏ —Å–µ–∫—Å—É–∞–ª—å–Ω—ã–º —Ü–µ–Ω—Ç—Ä–∞–º–∏ ‚öñÔ∏è.\n"
        "–¢—ã —É–º–µ–µ—à—å —Å–æ–µ–¥–∏–Ω—è—Ç—å –ª—é–±–æ–≤—å, —Ä–∞–∑—É–º –∏ —Å—Ç—Ä–∞—Å—Ç—å –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö. –¢–∞–∫–∞—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å "
        "–ø–æ–º–æ–≥–∞–µ—Ç —Ç–µ–±–µ –≤—ã—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –≥–ª—É–±–æ–∫–∏–µ, –∂–∏–≤—ã–µ –∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–µ —Å–≤—è–∑–∏. –°–æ—Ö—Ä–∞–Ω—è–π —ç—Ç–æ—Ç –±–∞–ª–∞–Ω—Å ‚Äî –æ–Ω —Ä–µ–¥–∫–æ—Å—Ç—å –∏ –±–æ–ª—å—à–∞—è —Å–∏–ª–∞."
    )
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
class Quiz(StatesGroup):
    waiting_for_gender = State()
    in_progress = State()
    waiting_for_answer = State()

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}  # user_id: {"scores": {...}, "gender": ..., "ready": False}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
gender_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ú—É–∂—á–∏–Ω–∞"), KeyboardButton(text="–ñ–µ–Ω—â–∏–Ω–∞")]],
    resize_keyboard=True,
    one_time_keyboard=True
)

@dp.message(CommandStart())
async def start(message: types.Message, state: FSMContext):
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data="start_quiz")]
    ])
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n\n"
        f"üë©‚Äç‚ù§Ô∏è‚Äçüë®–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç –æ –ª—é–±–≤–∏ –∏ –∫—Ä–µ–ø–∫–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö '–í–ú–ï–°–¢–ï' \n\n"
        f"üíö–û—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –∂–∏–≤—ã–º–∏ –∏ –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–º–∏,"
        f"–∫–æ–≥–¥–∞ —Å–æ–µ–¥–∏–Ω—è—é—Ç—Å—è —Ç—Ä–∏ —Ü–µ–Ω—Ç—Ä–∞ ‚Äî –æ–±—â–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏, –Ω–∞—Å—Ç–æ—è—â–∏–µ —á—É–≤—Å—Ç–≤–∞ –∏ —Ç–µ–ª–æ. \n\n"
        f"üöÄ–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç–µ–±–µ –ø—Ä–æ–π—Ç–∏ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –ø–æ–Ω—è—Ç—å, –Ω–∞ –∫–∞–∫–æ–º —Ü–µ–Ω—Ç—Ä–µ —Ç—ã –≤—ã–±–∏—Ä–∞–µ—à—å –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –∏ –ø–æ—á–µ–º—É  –æ—Ç–Ω–æ—à–µ–Ω–∏—è –Ω–µ —Å–∫–ª–∞–¥—ã–≤–≤–∞—é—Ç—Å—è, –∏–ª–∏ —Ç—ã –≤—Å–µ –Ω–∏–∫–∞–∫ –Ω–µ –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ —Å–≤–æ—é –≤—Ç–æ—Ä—É—é –ø–æ–ª–æ–≤–∏–Ω–∫—É",
        reply_markup=keyboard
    )
    await state.clear()

@dp.callback_query(lambda c: c.data == "start_quiz")
async def quiz_entry(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:",
        reply_markup=gender_keyboard
    )
    await state.set_state(Quiz.waiting_for_gender)

@dp.message(Quiz.waiting_for_gender)
async def process_gender(message: types.Message, state: FSMContext):
    gender = message.text
    user_id = message.from_user.id

    user_data[user_id] = {
        "scores": {"top": 0, "heart": 0, "sex": 0},
        "gender": gender,
        "ready": False
    }

    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç—å –Ω–∞ 9 –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Ü–µ–Ω—Ç—Ä.",
        reply_markup=types.ReplyKeyboardRemove()
    )

    await state.set_state(Quiz.in_progress)
    await send_question(user_id, 0)

async def send_question(user_id: int, question_id: int):
    question = questions[question_id]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text=opt["text"], callback_data=f"answer_{question_id}_{opt['center']}")]
        for opt in question["options"]
    ])
    await bot.send_message(user_id, question["text"], reply_markup=keyboard)

@dp.callback_query(lambda c: c.data.startswith("answer_"))
async def handle_answer(callback: types.CallbackQuery, state: FSMContext):
    _, question_id, center = callback.data.split("_")
    user_id = callback.from_user.id

    user_data[user_id]["scores"][center] += 1
    next_question_id = int(question_id) + 1

    if next_question_id < len(questions):
        await send_question(user_id, next_question_id)
    else:
        await prompt_subscription(callback)
        await state.clear()

async def prompt_subscription(callback: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")],
        [types.InlineKeyboardButton(text="üì≤ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url="https://t.me/AndrewMoriz_psy20")]
    ])
    await callback.message.answer(
        "–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª ¬´–í–ú–ï–°–¢–ï¬ª: https://t.me/andbeginagain\n"
        "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data == "check_subscription")
async def check_subscription(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        if member.status in ["member", "administrator", "creator"]:
            await show_result(user_id)
        else:
            await callback.message.answer("‚ùóÔ∏è–¢—ã –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω. –ü–æ–¥–ø–∏—à–∏—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
    except Exception as e:
        await callback.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        await bot.send_message(ADMIN_ID, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

async def show_result(user_id: int):
    data = user_data[user_id]
    scores = data["scores"]
    gender = data.get("gender", "–Ω–µ —É–∫–∞–∑–∞–Ω")

    max_center = max(scores, key=scores.get)
    all_values = list(scores.values())
    advice_type = "balance" if all(v == all_values[0] for v in all_values) else max_center

    result_text = (
        f"üéâ –¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ({gender}):\n\n"
        f"üß† –í–µ—Ä—Ö–Ω–∏–π —Ü–µ–Ω—Ç—Ä: {scores['top']}\n"
        f"üíö –°–µ—Ä–¥–µ—á–Ω—ã–π —Ü–µ–Ω—Ç—Ä: {scores['heart']}\n"
        f"üî• –°–µ–∫—Å—É–∞–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä: {scores['sex']}\n\n"
        f"{ADVICE[advice_type]}\n\n"
        f"üß≠ –•–æ—á–µ—à—å —Ä–∞–∑–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ü–µ–Ω—Ç—Ä—ã? –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: https://t.me/unionlevels\n\n"
        f"üåø –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ —Ä–µ—Ç—Ä–∏—Ç—É ¬´–í–ú–ï–°–¢–ï¬ª –ø–æ–¥ –ü–µ—Ç–µ—Ä–±—É—Ä–≥–æ–º ‚Äî 27 –∏—é–Ω—è 2025!"
    )

    await bot.send_message(
        user_id,
        result_text,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/andbeginagain")]
        ])
    )

    admin_text = (
        f"üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({gender}) –ø—Ä–æ—à—ë–ª —Ç–µ—Å—Ç.\n"
        f"–í–µ—Ä—Ö–Ω–∏–π: {scores['top']}, –°–µ—Ä–¥–µ—á–Ω—ã–π: {scores['heart']}, –°–µ–∫—Å—É–∞–ª—å–Ω—ã–π: {scores['sex']}.\n"
        f"–î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Ü–µ–Ω—Ç—Ä: {advice_type.upper()}"
    )
    await bot.send_message(ADMIN_ID, admin_text)

# ========== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Webhook –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ==========

async def on_startup(bot: Bot):
    try:
        await bot.set_webhook(WEBHOOK_URL)
        print("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        await asyncio.sleep(5)
        await on_startup(bot)  # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–≤—Ç–æ—Ä

async def on_shutdown(bot: Bot):
    await bot.send_message(ADMIN_ID, "‚ö†Ô∏è –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω! –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é—Å—å...")
    await bot.delete_webhook()

app = web.Application()
app["bot"] = bot

webhook_requests_handler = SimpleRequestHandler(
    dispatcher=dp,
    bot=bot,
)
webhook_requests_handler.register(app, path=WEBHOOK_PATH)
setup_application(app, dp, bot=bot)

if __name__ == "__main__":
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    web.run_app(app, host="0.0.0.0", port=int(os.getenv("PORT", 8080)))
