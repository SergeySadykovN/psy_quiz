import os

from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup

from questions import questions

bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()

ADMIN_ID = 966780974

# –°–æ–≤–µ—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
ADVICE = {
    "top": (
        "–¢–≤–æ–π –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Ü–µ–Ω—Ç—Ä ‚Äî –≤–µ—Ä—Ö–Ω–∏–π üß†.\n"
        "–¢—ã –∏—â–µ—à—å –ø–∞—Ä—Ç–Ω—ë—Ä–∞, —Å –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è, –º–µ—á—Ç–∞—Ç—å –∏ –≥–æ–≤–æ—Ä–∏—Ç—å ¬´–Ω–∞ –æ–¥–Ω–æ–º —è–∑—ã–∫–µ¬ª. "
        "–í–æ–∑–º–æ–∂–Ω–æ, —Ç–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –±–ª–∏–∑–æ—Å—Ç–∏ (—Å–µ—Ä–¥–µ—á–Ω—ã–π —Ü–µ–Ω—Ç—Ä) –∏–ª–∏ —Ç–µ–ª–µ—Å–Ω–æ–π —Å—Ç—Ä–∞—Å—Ç–∏ –∏ –æ—â—É—â–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏—è (—Å–µ–∫—Å—É–∞–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä)."
    ),
    "heart": (
        "–¢–≤–æ–π –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Ü–µ–Ω—Ç—Ä ‚Äî —Å–µ—Ä–¥–µ—á–Ω—ã–π üíö.\n"
        "–¢—ã —Å—Ç—Ä–µ–º–∏—à—å—Å—è –∫ –ª—é–±–≤–∏, —Ç–µ–ø–ª—É –∏ –±–ª–∏–∑–æ—Å—Ç–∏. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ—â—É—â–µ–Ω–∏—è, "
        "—á—Ç–æ –ø–∞—Ä—Ç–Ω—ë—Ä —Ä–∞–∑–¥–µ–ª—è–µ—Ç —Ç–≤–æ–∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ (–≤–µ—Ä—Ö–Ω–∏–π —Ü–µ–Ω—Ç—Ä) –∏–ª–∏ —Å–∏–ª—å–Ω–æ–≥–æ —Ç–µ–ª–µ—Å–Ω–æ–≥–æ –≤–ª–µ—á–µ–Ω–∏—è (—Å–µ–∫—Å—É–∞–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä)."
    ),
    "sex": (
        "–¢–≤–æ–π –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Ü–µ–Ω—Ç—Ä ‚Äî —Å–µ–∫—Å—É–∞–ª—å–Ω—ã–π üî•.\n"
        "–¢—ã –∂–∏–≤—ë—à—å —á–µ—Ä–µ–∑ —ç–Ω–µ—Ä–≥–∏—é —Ç–µ–ª–∞, —Å—Ç—Ä–∞—Å—Ç—å –∏ –ø—Ä–∏—Ç—è–∂–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç "
        "–¥—É—à–µ–≤–Ω–æ–π –≥–ª—É–±–∏–Ω—ã –∏ –ø—Ä–∏–Ω—è—Ç–∏—è (—Å–µ—Ä–¥–µ—á–Ω—ã–π —Ü–µ–Ω—Ç—Ä) –∏–ª–∏ –æ–±—â–∏—Ö —Ü–µ–ª–µ–π –∏ —Å–º—ã—Å–ª–æ–≤ —Å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º (–≤–µ—Ä—Ö–Ω–∏–π —Ü–µ–Ω—Ç—Ä)."
    ),
    "balance": (
        "–£ —Ç–µ–±—è –≥–∞—Ä–º–æ–Ω–∏—á–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ–∂–¥—É –≤–µ—Ä—Ö–Ω–∏–º, —Å–µ—Ä–¥–µ—á–Ω—ã–º –∏ —Å–µ–∫—Å—É–∞–ª—å–Ω—ã–º —Ü–µ–Ω—Ç—Ä–∞–º–∏ ‚öñÔ∏è.\n"
        "–¢—ã —É–º–µ–µ—à—å —Å–æ–µ–¥–∏–Ω—è—Ç—å –ª—é–±–æ–≤—å, —Ä–∞–∑—É–º –∏ —Å—Ç—Ä–∞—Å—Ç—å –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö. –¢–∞–∫–∞—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å "
        "–ø–æ–º–æ–≥–∞–µ—Ç —Ç–µ–±–µ –≤—ã—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –≥–ª—É–±–æ–∫–∏–µ, –∂–∏–≤—ã–µ –∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–µ —Å–≤—è–∑–∏. –°–æ—Ö—Ä–∞–Ω—è–π —ç—Ç–æ—Ç –±–∞–ª–∞–Ω—Å ‚Äî –æ–Ω —Ä–µ–¥–∫–æ—Å—Ç—å –∏ –±–æ–ª—å—à–∞—è —Å–∏–ª–∞."
    )
}


# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
class Quiz(StatesGroup):
    waiting_for_gender = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
    in_progress = State()
    waiting_for_answer = State()


# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}  # user_id: {"scores": {"top": 0, "heart": 0, "sex": 0}, "gender": None}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
gender_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ú—É–∂—á–∏–Ω–∞"), KeyboardButton(text="–ñ–µ–Ω—â–∏–Ω–∞")],
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)


# /start
@dp.message(CommandStart())
async def start(message: types.Message, state: FSMContext):
    user_name = message.from_user.full_name
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç {user_name}!\n\n"
        f"–û—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –∂–∏–≤—ã–º–∏ –∏ –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–º–∏, \n"
        f"–∫–æ–≥–¥–∞ —Å–æ–µ–¥–∏–Ω—è—é—Ç—Å—è —Ç—Ä–∏ —Ü–µ–Ω—Ç—Ä–∞ ‚Äî —Ü–µ–Ω–Ω–æ—Å—Ç–∏, —á—É–≤—Å—Ç–≤–∞ –∏ —Ç–µ–ª–æ.\n"
        f"–≠—Ç–æ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø–æ–Ω—è—Ç—å,\n"
        f"–Ω–∞ –∫–∞–∫–æ–º —É—Ä–æ–≤–Ω–µ —Ç—ã –≤—ã–±–∏—Ä–∞–µ—à—å –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –∏ –ø–æ—á–µ–º—É –æ—Ç–Ω–æ—à–µ–Ω–∏—è –º–æ–≥—É—Ç –Ω–µ —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å—Å—è\n\n"
        f"–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:",
        reply_markup=gender_keyboard
    )
    await state.set_state(Quiz.waiting_for_gender)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
@dp.message(Quiz.waiting_for_gender)
async def process_gender(message: types.Message, state: FSMContext):
    gender = message.text
    user_id = message.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[user_id] = {
        "scores": {"top": 0, "heart": 0, "sex": 0},
        "gender": gender
    }

    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç—å –Ω–∞ 9 –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Ü–µ–Ω—Ç—Ä.",
        reply_markup=types.ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    await state.set_state(Quiz.in_progress)
    await send_question(user_id, 0)


# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
async def send_question(user_id: int, question_id: int):
    question = questions[question_id]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text=opt["text"], callback_data=f"answer_{question_id}_{opt['center']}")]
        for opt in question["options"]
    ])
    await bot.send_message(user_id, question["text"], reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
@dp.callback_query(lambda c: c.data.startswith("answer_"))
async def handle_answer(callback: types.CallbackQuery, state: FSMContext):
    _, question_id, center = callback.data.split("_")
    user_id = callback.from_user.id

    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–ª –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ü–µ–Ω—Ç—Ä—É
    user_data[user_id]["scores"][center] += 1

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    next_question_id = int(question_id) + 1
    if next_question_id < len(questions):
        await send_question(user_id, next_question_id)
    else:
        await show_result(user_id)
        await state.clear()


# –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
async def show_result(user_id: int):
    data = user_data[user_id]
    scores = data["scores"]
    gender = data.get("gender", "–Ω–µ —É–∫–∞–∑–∞–Ω")

    max_center = max(scores, key=scores.get)
    # min_center = min(scores, key=scores.get)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    all_values = list(scores.values())
    if all(v == all_values[0] for v in all_values):
        advice_type = "balance"
    else:
        advice_type = max_center

    result_text = (
        f"üéâ –¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ({gender}):\n\n"
        f"üß† –í–µ—Ä—Ö–Ω–∏–π —Ü–µ–Ω—Ç—Ä: {scores['top']}\n"
        f"üíö –°–µ—Ä–¥–µ—á–Ω—ã–π —Ü–µ–Ω—Ç—Ä: {scores['heart']}\n"
        f"üî• –°–µ–∫—Å—É–∞–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä: {scores['sex']}\n\n"
        f"{ADVICE[advice_type]}\n\n"

        f'üß≠ –•–æ—á–µ—à—å –ø–æ–Ω—è—Ç—å, –∫–∞–∫ —Ä–∞–∑–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ü–µ–Ω—Ç—Ä—ã –∏ –ø—Ä–∏—Ç—è–Ω—É—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è?\n'
        f'üì≤ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: ¬´–í–º–µ—Å—Ç–µ¬ª https://t.me/unionlevels ‚Äî —Ç–∞–º –æ –ª—é–±–≤–∏, —ç–Ω–µ—Ä–≥–∏–∏ –∏ –≤–∑—Ä–æ—Å–ª–æ–º –ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–µ.\n\n'
        f'–ê —Ç–∞–∫ –∂–µ:\n'
        f'üåø –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ —Ä–µ—Ç—Ä–∏—Ç—É ¬´–í–ú–ï–°–¢–ï¬ª –ø–æ–¥ –ü–µ—Ç–µ—Ä–±—É—Ä–≥–æ–º, \n'
        f'27 –∏—é–Ω—è 2025 ‚Äî —Ç—Ä–∏ –¥–Ω—è –ø–æ–≥—Ä—É–∂–µ–Ω–∏—è –≤ —Å–µ—Ä–¥—Ü–µ, —Ç–µ–ª–æ –∏ –¥—É—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π.'
    )

    await bot.send_message(
        user_id,
        result_text,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/unionlevels"),
        ]])
    )
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
    admin_text = (
        f"üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({gender}) –ø—Ä–æ—à—ë–ª —Ç–µ—Å—Ç.\n"
        f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
        f"–í–µ—Ä—Ö–Ω–∏–π: {scores['top']}, –°–µ—Ä–¥–µ—á–Ω—ã–π: {scores['heart']}, –°–µ–∫—Å—É–∞–ª—å–Ω—ã–π: {scores['sex']}.\n"
        f"–î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Ü–µ–Ω—Ç—Ä: {advice_type.upper()}"
    )
    await bot.send_message(ADMIN_ID, admin_text)





# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    dp.run_polling(bot)